import { useState } from 'react';
import * as RechartsPrimitive from 'recharts';
import { format } from 'date-fns';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card } from '@/components/ui/card';
import { useFiles } from '@/context/FilesContext';

const getTimeInterval = (unit: 'hours' | 'days' | 'months') => {
  switch (unit) {
    case 'hours': return 60 * 60 * 1000; // 1 hour
    case 'days': return 24 * 60 * 60 * 1000; // 1 day
    case 'months': return 30 * 24 * 60 * 60 * 1000; // ~1 month
    default: return 24 * 60 * 60 * 1000;
  }
};

const generateChartData = (files: any[], points: number, unit: 'hours' | 'days' | 'months') => {
  const data = [];
  const now = new Date();

  for (let i = points - 1; i >= 0; i--) {
    const date = new Date();
    if (unit === 'hours') date.setHours(date.getHours() - i);
    else if (unit === 'days') date.setDate(date.getDate() - i);
    else date.setMonth(date.getMonth() - i);

    // Filter files uploaded in this time period
    const periodFiles = files.filter(file => {
      const fileDate = new Date(file.modifiedAt);
      return fileDate >= date && fileDate <= new Date(date.getTime() + getTimeInterval(unit));
    });

    const googleDriveSize = periodFiles
      .filter(f => f.source === 'google')
      .reduce((acc, f) => acc + f.size, 0);
    const oneDriveSize = periodFiles
      .filter(f => f.source === 'onedrive')
      .reduce((acc, f) => acc + f.size, 0);

    data.push({
      timestamp: date.toISOString(),
      'Google Drive': googleDriveSize,
      'OneDrive': oneDriveSize,
      uploads: periodFiles.map(file => ({
        name: file.name,
        type: file.type,
        size: file.size,
        source: file.source === 'google' ? 'Google Drive' : 'OneDrive',
        uploadTime: file.modifiedAt
      }))
    });
  }
  return data;
};

const formatBytes = (bytes: number) => {
  const sizes = ['B', 'KB', 'MB', 'GB'];
  if (bytes === 0) return '0 B';
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
};

export const UploadHistoryChart = () => {
  const { files } = useFiles();
  const [timeRange, setTimeRange] = useState<'day' | 'week' | 'month' | 'year'>('week');

  const chartData = {
    day: generateChartData(files, 24, 'hours'),
    week: generateChartData(files, 7, 'days'),
    month: generateChartData(files, 30, 'days'),
    year: generateChartData(files, 12, 'months')
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    switch (timeRange) {
      case 'day':
        return format(date, 'HH:mm');
      case 'week':
      case 'month':
        return format(date, 'MMM dd');
      case 'year':
        return format(date, 'MMM yyyy');
    }
  };

  const config = {
    'Google Drive': {
      label: 'Google Drive',
      theme: { light: '#4285F4', dark: '#8AB4F8' }
    },
    'OneDrive': {
      label: 'OneDrive',
      theme: { light: '#0078D4', dark: '#50A9FF' }
    }
  };

  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-lg font-semibold">Upload History</h2>
        <Select value={timeRange} onValueChange={(value: any) => setTimeRange(value)}>
          <SelectTrigger className="w-32">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="day">Past Day</SelectItem>
            <SelectItem value="week">Past Week</SelectItem>
            <SelectItem value="month">Past Month</SelectItem>
            <SelectItem value="year">Past Year</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="h-[500px] w-full p-6">
        <ChartContainer config={config}>
          <RechartsPrimitive.LineChart
            data={chartData[timeRange]}
            margin={{ top: 30, right: 30, bottom: 30, left: 50 }}
          >
            <RechartsPrimitive.CartesianGrid strokeDasharray="3 3" />
            <RechartsPrimitive.XAxis 
              dataKey="timestamp"
              tickFormatter={formatTimestamp}
              dy={10}
            />
            <RechartsPrimitive.YAxis 
              tickFormatter={formatBytes}
              dx={-10}
            />
            <RechartsPrimitive.Line
              type="monotone"
              dataKey="Google Drive"
              stroke="var(--color-Google-Drive)"
              strokeWidth={2}
              dot={(props) => {
                const value = props.payload['Google Drive'];
                return value > 0 ? (
                  <RechartsPrimitive.Dot
                    {...props}
                    r={4}
                    strokeWidth={2}
                    fill="var(--color-Google-Drive)"
                    stroke="var(--color-Google-Drive)"
                  />
                ) : null;
              }}
              activeDot={{ r: 6 }}
            />
            <RechartsPrimitive.Line
              type="monotone"
              dataKey="OneDrive"
              stroke="var(--color-OneDrive)"
              strokeWidth={2}
              dot={(props) => {
                const value = props.payload['OneDrive'];
                return value > 0 ? (
                  <RechartsPrimitive.Dot
                    {...props}
                    r={4}
                    strokeWidth={2}
                    fill="var(--color-OneDrive)"
                    stroke="var(--color-OneDrive)"
                  />
                ) : null;
              }}
              activeDot={{ r: 6 }}
            />
            <RechartsPrimitive.Tooltip
              content={({ active, payload }) => {
                if (!active || !payload?.length) return null;

                const data = payload[0].payload;
                return (
                  <div className="rounded-lg border bg-background p-2 shadow-md">
                    <div className="font-medium">
                      {formatTimestamp(data.timestamp)}
                    </div>
                    {payload.map((entry, index) => (
                      entry.value > 0 && (
                        <div key={index} className="mt-1">
                          <span style={{ color: entry.color }}>
                            {entry.name}: {formatBytes(entry.value)}
                          </span>
                        </div>
                      )
                    ))}
                    {data.uploads?.map((upload: any, i: number) => (
                      <div key={i} className="mt-2 border-t pt-2">
                        <div className="font-medium">{upload.name}</div>
                        <div className="text-muted-foreground text-sm">
                          Type: {upload.type.toUpperCase()}
                          <br />
                          Size: {formatBytes(upload.size)}
                          <br />
                          Location: {upload.source}
                          <br />
                          Time: {format(new Date(upload.uploadTime), 'PPp')}
                        </div>
                      </div>
                    ))}
                  </div>
                );
              }}
            />
          </RechartsPrimitive.LineChart>
        </ChartContainer>
      </div>
    </Card>
  );
};